
/**
 * Obt√©m o ID do documento das propriedades
 * @return {string|null} ID do documento ou null
 */
function getDocumentId() {
    const SP = PropertiesService.getScriptProperties();
    const documentId = SP.getProperty('docData');
    
    if (!documentId) {
      console.error('‚ùå ID do documento n√£o encontrado');
      return null;
    }
    
    return documentId;
  }
  
  /**
   * Obt√©m o ID da planilha das propriedades
   * @return {string|null} ID da planilha ou null
   */
  function getSheetId() {
    const SP = PropertiesService.getScriptProperties();
    const sheetId = SP.getProperty('sheetData');
    
    if (!sheetId) {
      console.error('‚ùå ID da planilha n√£o encontrado');
      return null;
    }
    
    return sheetId;
  }
  
  /**
   * Valida se as propriedades necess√°rias est√£o configuradas
   * @return {boolean} true se todas configuradas
   */
  function validateScriptProperties() {
      const SP = PropertiesService.getScriptProperties();
      const sheetDataId = SP.getProperty('sheetData');
      const docDataId = SP.getProperty('docData');
      const logDocFileId = SP.getProperty('logDocFileId');
      
      if (!sheetDataId || !docDataId) {
        console.error('‚ùå Propriedades principais n√£o configuradas (sheetData ou docData)');
        return false;
      }
      
      if (!logDocFileId) {
        console.warn('‚ö†Ô∏è Propriedade logDocFileId n√£o configurada - logs de intera√ß√£o n√£o funcionar√£o');
        // N√£o retorna false pois o log n√£o √© cr√≠tico para o funcionamento principal
      }
      
      return true;
  }
  
  /**
   * Configura propriedades com valores padr√£o
   */
  function setupScriptProperties() {
      const SP = PropertiesService.getScriptProperties();
      
      // IDs padr√£o - voc√™ pode alterar estes valores
      const defaultSheetData = "1uaStYZhSDK7tXtBsJlLJrCm59RQwBjKV7keLVFME2nM";
      const defaultDocData = "1wA4vP5qoUnNpvR7YxrV3nCGEwwKGjJ6gzgZfgLQJnrM";
      // ID padr√£o para documento de log de intera√ß√µes da IA - voc√™ pode alterar este valor
      const defaultLogDocFileId = "1wA4vP5qoUnNpvR7YxrV3nCGEwwKGjJ6gzgZfgLQJnrM"; // Mesmo que docData por padr√£o
      
      if (!SP.getProperty('sheetData')) {
        SP.setProperty('sheetData', defaultSheetData);
      }
      
      if (!SP.getProperty('docData')) {
        SP.setProperty('docData', defaultDocData);
      }
      
      // Configura o ID do documento de log se n√£o existir
      if (!SP.getProperty('logDocFileId')) {
        SP.setProperty('logDocFileId', defaultLogDocFileId);
        console.log("‚úÖ Propriedade logDocFileId configurada com valor padr√£o:", defaultLogDocFileId);
      }
      
      validateScriptProperties();
  }
  
  /**
   * Configura especificamente o ID do documento de log
   * @param {string} logDocFileId - ID do documento para log (opcional)
   * @return {boolean} true se configurado com sucesso
   */
  function setupLogDocumentId(logDocFileId = null) {
      const SP = PropertiesService.getScriptProperties();
      
      if (!logDocFileId) {
          // Se n√£o fornecido, usa o mesmo ID do documento principal por padr√£o
          logDocFileId = SP.getProperty('docData');
          
          if (!logDocFileId) {
              console.error('‚ùå N√£o foi poss√≠vel configurar logDocFileId: docData n√£o encontrado');
              return false;
          }
      }
      
      try {
          // Testa se o documento existe e se temos acesso
          const testDoc = DocumentApp.openById(logDocFileId);
          testDoc.getName(); // Testa acesso
          
          SP.setProperty('logDocFileId', logDocFileId);
          console.log('‚úÖ logDocFileId configurado com sucesso:', logDocFileId);
          return true;
          
      } catch (error) {
          console.error('‚ùå Erro ao configurar logDocFileId:', error.message);
          console.error('Verifique se o ID do documento est√° correto e se voc√™ tem acesso a ele');
          return false;
      }
  }
  
  /**
   * Cria um novo documento especificamente para logs de intera√ß√£o da IA
   * @return {string|null} ID do documento criado ou null se falhou
   */
  function createLogDocument() {
      try {
          const newDoc = DocumentApp.create('Log de Intera√ß√µes IA - ' + new Date().toLocaleDateString());
          const newDocId = newDoc.getId();
          
          // Adiciona conte√∫do inicial ao documento
          const body = newDoc.getBody();
          body.appendParagraph('Log de Intera√ß√µes da IA').setHeading(DocumentApp.ParagraphHeading.TITLE);
          body.appendParagraph('Este documento registra todas as intera√ß√µes entre os prompts e a IA.')
              .setHeading(DocumentApp.ParagraphHeading.SUBTITLE);
          body.appendParagraph('Criado automaticamente em: ' + new Date().toLocaleString());
          body.appendParagraph(''); // Linha em branco
          
          console.log('‚úÖ Novo documento de log criado:', newDocId);
          
          // Configura automaticamente como logDocFileId
          if (setupLogDocumentId(newDocId)) {
              return newDocId;
          } else {
              return null;
          }
          
      } catch (error) {
          console.error('‚ùå Erro ao criar documento de log:', error.message);
          return null;
      }
  }
  
  /**
   * Obt√©m prompts filtrados por fromHeadline2 (fun√ß√£o de servidor para fallback)
   * @param {string} fromHeadline2 - Valor do fromHeadline2 para filtrar
   * @return {Array} Array com prompts filtrados
   */
  function getFilteredPromptsFromServer(fromHeadline2) {
    try {
      // Obt√©m os IDs necess√°rios das propriedades (mesmo padr√£o de getSidebarData)
      const sheetId = getSheetId();
      const documentId = getDocumentId();
  
      if (!sheetId) {
        const errorMsg = 'üõë FALHA CR√çTICA: ID da planilha (sheetData) n√£o encontrado nas propriedades do script.';
        console.error(errorMsg);
        return [];
      }
  
      if (!documentId) {
        const errorMsg = 'üõë FALHA CR√çTICA: ID do Documento (docData) n√£o encontrado nas propriedades do script.';
        console.error(errorMsg);
        return [];
      }
  
      // Cria DataFetcher com os IDs corretos (mesmo padr√£o de getSidebarData)
      const dataFetcher = new GoogleDriveDataFetcher(documentId, sheetId);
      const sidebarData = dataFetcher.extractAllDataFromSources();
      const allPrompts = sidebarData.allPrompts || {};
      
      const filteredPrompts = [];
      
      Object.keys(allPrompts).forEach(promptKey => {
        const prompt = allPrompts[promptKey];
        if (prompt.fromHeadline2 === fromHeadline2) {
          filteredPrompts.push({
            key: promptKey,
            title: promptKey,
            fromHeadline2: prompt.fromHeadline2,
            toHeadline2: prompt.toHeadline2,
            content: prompt.content
          });
        }
      });
      
      console.log('‚úÖ Prompts filtrados obtidos do servidor:', filteredPrompts.length);
      return filteredPrompts;
      
    } catch (error) {
      console.error('‚ùå Erro ao obter prompts filtrados do servidor:', error);
      return [];
    }
  }
  